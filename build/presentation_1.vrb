\frametitle{Don't believe me?}

\begin{multicols}{2}
\lstset{language=C++,
		numbers=left,
		stepnumber=1,
		firstnumber=1,
		xleftmargin=2em,
		frame=single,
		framexleftmargin=2.5em,
		numberfirstline=true,
		breaklines=true,
                basicstyle=\fontsize{6}{7}\ttfamily,
                keywordstyle=\color{blue}\ttfamily,
                stringstyle=\color{red}\ttfamily,
                commentstyle=\color{green}\ttfamily,
                morecomment=[l][\color{magenta}]{\#}
}
\begin{lstlisting}
 template<typename Type> class concurrent_stack {
    struct Node { Type t; shared_ptr<Node> next; };
    atomic_shared_ptr<Node> head;
    concurrent_stack( concurrent_stack &) =delete;
    void operator=(concurrent_stack&) =delete;

    public:
    concurrent_stack() =default;
    ~concurrent_stack() =default;
    class reference {
        shared_ptr<Node> p;
    public:
       reference(shared_ptr<Node> p_) : p{p_} { }
       Type& operator* () { return p->t; }
       Type* operator->() { return &p->t; }
    };

    auto find(Type t) const {
        auto p = head.load();
        while( p && p->t != t )
            p = p->next;
        return reference(move(p));
    }
    auto front() const {
       return reference(head);
    }
    void push_front(Type t) {
      auto p = make_shared<Node>();
      p->t = t;
      p->next = head;
      while( !head.compare_exchange_weak(p->next, p) ){ }
    }
    void pop_front() {
       auto p = head.load();
       while( p && !head.compare_exchange_weak(p, p->next) ){ }
    }
};

\end{lstlisting}
\columnbreak
\end{multicols}
